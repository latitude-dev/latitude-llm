name: Build and Push Docker Images

on: workflow_call

concurrency:
  group: build-and-push-${{ github.ref }}
  cancel-in-progress: false

env:
  PUBLIC_REGISTRY: ghcr.io
  PUBLIC_OWNER: latitude-dev

jobs:
  test:
    uses: ./.github/workflows/test.yml
    with:
      workflow_call: true

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      gateway: ${{ steps.filter.outputs.gateway }}
      workers: ${{ steps.filter.outputs.workers }}
      websockets: ${{ steps.filter.outputs.websockets }}
      migrations: ${{ steps.filter.outputs.migrations }}
      shared: ${{ steps.filter.outputs.shared }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
            gateway:
              - 'apps/gateway/**'
            workers:
              - 'apps/workers/**'
            websockets:
              - 'apps/websockets/**'
            migrations:
              - 'packages/core/**'
            shared:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - '.github/workflows/**'
              - 'packages/**'

  build-and-push-public:
    needs: [check-changes]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          # Public images on GitHub Container Registry (without DataDog secrets)
          # Multi-platform builds (AMD64)
          - app: web
            dockerfile: apps/web/docker/Dockerfile
            registry: ghcr.io
            owner: latitude-dev
            repo_name: web
            platforms: linux/amd64
            build_if: ${{ needs.check-changes.outputs.web == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: gateway
            dockerfile: apps/gateway/docker/Dockerfile
            registry: ghcr.io
            owner: latitude-dev
            repo_name: gateway
            platforms: linux/amd64
            build_if: ${{ needs.check-changes.outputs.gateway == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: workers
            dockerfile: apps/workers/docker/Dockerfile
            registry: ghcr.io
            owner: latitude-dev
            repo_name: workers
            platforms: linux/amd64
            build_if: ${{ needs.check-changes.outputs.workers == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: websockets
            dockerfile: apps/websockets/docker/Dockerfile
            registry: ghcr.io
            owner: latitude-dev
            repo_name: websockets
            platforms: linux/amd64
            build_if: ${{ needs.check-changes.outputs.websockets == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: migrations
            dockerfile: packages/core/docker/Dockerfile
            registry: ghcr.io
            owner: latitude-dev
            repo_name: migrations
            platforms: linux/amd64
            build_if: ${{ needs.check-changes.outputs.migrations == 'true' || needs.check-changes.outputs.shared == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry for public images
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate Docker metadata/tags based on Git context
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ format('{0}/{1}/{2}', matrix.registry, matrix.owner, matrix.repo_name) }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push the Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ format('{0}/{1}/{2}', matrix.registry, matrix.owner, matrix.repo_name) }}:latest
          cache-to: type=inline

  build-and-push-private:
    needs: [check-changes]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          # Private images on AWS ECR (with DataDog)
          - app: web
            dockerfile: apps/web/docker/Dockerfile
            repo_name: latitude-llm-app-repo-43d71dc
            build_if: ${{ needs.check-changes.outputs.web == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: gateway
            dockerfile: apps/gateway/docker/Dockerfile
            repo_name: latitude-llm-gateway-repo-b859826
            build_if: ${{ needs.check-changes.outputs.gateway == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: workers
            dockerfile: apps/workers/docker/Dockerfile
            repo_name: latitude-llm-workers-repo-184cb29
            build_if: ${{ needs.check-changes.outputs.workers == 'true' || needs.check-changes.outputs.shared == 'true' }}
          - app: websockets
            dockerfile: apps/websockets/docker/Dockerfile
            repo_name: latitude-llm-websockets-repo-eea3d9a
            build_if: ${{ needs.check-changes.outputs.websockets == 'true' || needs.check-changes.outputs.shared == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials for ECR access
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.ARN_OF_IAM_ROLE_TO_ASSUME }}
          role-session-name: ECRPush
          aws-region: ${{ vars.AWS_REGION }}
          role-skip-session-tagging: true

      # Set ECR registry for private images
      - name: Set ECR registry
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      # Login to ECR for private images
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      # Generate Docker metadata/tags based on Git context
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ format('{0}/{1}', env.ECR_REGISTRY, matrix.repo_name) }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push the Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ format('{0}/{1}', env.ECR_REGISTRY, matrix.repo_name) }}:latest
          cache-to: type=inline
          secrets: |
            NEXT_SERVER_ACTIONS_ENCRYPTION_KEY=${{ secrets.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}
          build-args: |
            AWS_REGION=${{ vars.AWS_REGION }}
            BUILD_ID=${{ github.sha }}
            DD_GIT_COMMIT_SHA=${{ github.sha }}
            DD_GIT_REPOSITORY_URL=${{ github.server_url }}/${{ github.repository }}
            DD_SITE=${{ vars.DD_SITE }}
            NEXT_PUBLIC_DATADOG_APPLICATION_ID=${{ secrets.NEXT_PUBLIC_DATADOG_APPLICATION_ID }}
            NEXT_PUBLIC_DATADOG_CLIENT_TOKEN=${{ secrets.NEXT_PUBLIC_DATADOG_CLIENT_TOKEN }}
            NEXT_PUBLIC_DATADOG_SITE=${{ secrets.NEXT_PUBLIC_DATADOG_SITE }}
            NEXT_PUBLIC_DOCS_URL=${{ vars.NEXT_PUBLIC_DOCS_URL }}
            NEXT_PUBLIC_LATITUDE_CLOUD_PAYMENT_URL=${{ vars.NEXT_PUBLIC_LATITUDE_CLOUD_PAYMENT_URL }}
            NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
            NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
            S3_BUCKET=${{ vars.STATIC_ASSETS_S3_BUCKET }}
            STATIC_ASSETS_HOST=${{ vars.STATIC_ASSETS_HOST }}
            NEXT_PUBLIC_COLD_EMAIL_OUTREACH_SELECT_AGENT_UUID=${{ vars.NEXT_PUBLIC_COLD_EMAIL_OUTREACH_SELECT_AGENT_UUID }}
            NEXT_PUBLIC_CONTENT_CREATOR_SELECT_AGENT_UUID=${{ vars.NEXT_PUBLIC_CONTENT_CREATOR_SELECT_AGENT_UUID }}
            NEXT_PUBLIC_NEWS_CURATOR_SELECT_AGENT_UUID=${{ vars.NEXT_PUBLIC_NEWS_CURATOR_SELECT_AGENT_UUID }}
            NEXT_PUBLIC_DEFAULT_AGENT_ONBOARDING_UUID=${{ vars.NEXT_PUBLIC_DEFAULT_AGENT_ONBOARDING_UUID }}
  run-migrations:
    needs: [build-and-push-private]
    uses: ./.github/workflows/run-migrations.yml
    with:
      workflow_call: true
    secrets:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_USER: ${{ secrets.SSH_USER }}

  deploy-bluegreen:
    needs: [run-migrations, build-and-push-private]
    uses: ./.github/workflows/deploy-bluegreen.yml
    permissions:
      id-token: write
      contents: read
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ARN_OF_IAM_ROLE_TO_ASSUME: ${{ secrets.ARN_OF_IAM_ROLE_TO_ASSUME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  deploy-rolling:
    needs: [run-migrations, build-and-push-private]
    uses: ./.github/workflows/deploy-rolling.yml
    permissions:
      id-token: write
      contents: read
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ARN_OF_IAM_ROLE_TO_ASSUME: ${{ secrets.ARN_OF_IAM_ROLE_TO_ASSUME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
