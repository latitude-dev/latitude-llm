name: Deploy Web and Gateway (Blue-Green)

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      ARN_OF_IAM_ROLE_TO_ASSUME:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  deployment:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: web
            task_family: LatitudeLLMAppTaskFamily
            codedeploy_app: LatitudeLLMCodeDeployApp
            codedeploy_group: LatitudeLLMDeploymentGroup
            repo_name: latitude-llm-app-repo-43d71dc
          - app: gateway
            task_family: LatitudeLLMGatewayTaskFamily
            codedeploy_app: LatitudeLLMCodeDeployGateway
            codedeploy_group: LatitudeLLMGatewayDeploymentGroup
            repo_name: latitude-llm-gateway-repo-b859826
          - app: workers
            task_family: LatitudeLLMWorkersTaskFamily
            codedeploy_app: LatitudeLLMWorkersCodeDeployApp
            codedeploy_group: LatitudeLLMWorkersDeploymentGroup
            repo_name: latitude-llm-workers-repo-184cb29
    concurrency:
      group: deploy-${{ matrix.app }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.ARN_OF_IAM_ROLE_TO_ASSUME }}
          role-session-name: ${{ matrix.app }}Deployment
          aws-region: ${{ vars.AWS_REGION }}
          role-skip-session-tagging: true

      - name: Get image tag
        id: get_tag
        run: |
          SHA=${{ github.sha }}
          echo "APP_IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ matrix.repo_name }}:sha-${SHA}" >> $GITHUB_ENV

      - name: Create new task definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ matrix.task_family }} --query 'taskDefinition')
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[0].image = env.APP_IMAGE')
          echo $NEW_TASK_DEFINITION > new-task-definition.json
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query taskDefinition.taskDefinitionArn --output text)
          echo "NEW_TASK_DEFINITION_ARN=$NEW_TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Update AppSpec with new task definition
        run: |
          sed -i 's|TaskDefinition: .*|TaskDefinition: '"$NEW_TASK_DEFINITION_ARN"'|' apps/${{ matrix.app }}/appspec.yml

      - name: Deploy with CodeDeploy
        working-directory: apps/${{ matrix.app }}
        run: |
          echo "Deploying commit ${{ github.sha }} to production"
          appspec_content=$(cat appspec.yml | jq -Rs .)

          # Create deployment and capture the deployment ID
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ matrix.codedeploy_app }} \
            --deployment-group-name ${{ matrix.codedeploy_group }} \
            --revision "{\"revisionType\": \"AppSpecContent\", \"appSpecContent\": {\"content\": $appspec_content}}" \
            --query 'deploymentId' \
            --output text)

          echo "Deployment ID: $DEPLOYMENT_ID"

          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID

          echo "Deployment completed successfully!"
