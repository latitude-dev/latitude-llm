name: Deploy Web

on:
  workflow_run:
    workflows: ['Build and Push Docker Images']
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  OWNER: latitude-dev

jobs:
  deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
        working-directory: apps/infra

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.ARN_OF_IAM_ROLE_TO_ASSUME }}
          role-session-name: WebDeployment
          aws-region: eu-central-1
          role-skip-session-tagging: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get image tag
        id: get_tag
        run: |
          SHA_TAG=$(echo ${{ github.event.workflow_run.head_sha }} | cut -c1-7)
          echo "WEB_IMAGE=${{ env.REGISTRY }}/${{ env.OWNER }}/web:sha-${SHA_TAG}" >> $GITHUB_ENV

      - name: Create new task definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition LatitudeLLMAppTaskFamily --query 'taskDefinition')
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[0].image = env.WEB_IMAGE')
          echo $NEW_TASK_DEFINITION > new-task-definition.json
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query taskDefinition.taskDefinitionArn --output text)
          echo "NEW_TASK_DEFINITION_ARN=$NEW_TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Update AppSpec with new task definition
        run: |
          sed -i 's|TaskDefinition: .*|TaskDefinition: '"$NEW_TASK_DEFINITION_ARN"'|' apps/web/appspec.yml

      - name: Deploy with CodeDeploy
        working-directory: apps/web
        run: |
          echo "Deploying commit ${{ github.event.workflow_run.head_sha }} to production"
          appspec_content=$(cat appspec.yml | jq -Rs .)
          aws deploy create-deployment \
            --application-name LatitudeLLMCodeDeployApp \
            --deployment-group-name LatitudeLLMDeploymentGroup \
            --revision "{\"revisionType\": \"AppSpecContent\", \"appSpecContent\": {\"content\": $appspec_content}}"

concurrency:
  group: production-web
  cancel-in-progress: false
