name: Build and Push Docker Images

# Trigger on:
# - Pushes to main branch (production deployments)
# - New version tags (releases)
# - Pull requests to main (testing builds)
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  OWNER: latitude-dev

jobs:
  # Lint and test jobs only run on main branch to ensure quality before building production images
  lint:
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/lint.yml
    with:
      workflow_call: true

  test:
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/test.yml
    with:
      workflow_call: true

  build-and-push:
    needs: [lint, test]
    # Run this job if:
    # - We're not on main branch (PR or tag builds run immediately)
    # - OR we're on main and both lint and test passed
    if: always() && (github.ref != 'refs/heads/main' || (needs.lint.result == 'success' && needs.test.result == 'success'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        # Build all our service images in parallel
        app: [web, gateway, workers, websockets]
        include:
          - app: web
            dockerfile: apps/web/docker/Dockerfile
          - app: gateway
            dockerfile: apps/gateway/docker/Dockerfile
          - app: workers
            dockerfile: apps/workers/docker/Dockerfile
          - app: websockets
            dockerfile: apps/websockets/docker/Dockerfile

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry to enable both pulling cache and pushing images
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate Docker metadata/tags based on Git context
      # - For main branch: latest tag
      # - For PRs: PR-specific tag
      # - For version tags: semver tags
      # - For all: SHA tag for precise version tracking
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push the Docker image
      # - Uses layer caching for faster builds
      # - Only pushes on main branch or tags (not on PRs)
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.app }}:latest
          cache-to: type=inline

# Concurrency settings to manage multiple workflow runs
# - Groups runs by workflow name and git ref
# - For main branch: Never cancel running builds (queue them instead)
# - For other branches/PRs: Cancel old builds when new ones come in
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
