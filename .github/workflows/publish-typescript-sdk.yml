name: Publish TypeScript SDK

on:
  push:
    branches:
      - main

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get package version
        id: get_version
        run: |
          CURRENT_VERSION=$(node -p "require('./packages/sdks/typescript/package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check version on npm
        id: check_version
        run: |
          NPM_VERSION=$(npm view @latitude-data/sdk version 2>/dev/null || echo "0.0.0")
          if [ "${{ steps.get_version.outputs.version }}" != "$NPM_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm install --filter=@latitude-data/sdk...

      - name: Build package (with workspace dependencies)
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm exec turbo run build --filter=@latitude-data/sdk...

      - name: Run linter
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm exec turbo run lint --filter=@latitude-data/sdk...

      - name: Run typescript checker
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm exec turbo run tc --filter=@latitude-data/sdk...

      - name: Run tests
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm exec turbo run test --filter=@latitude-data/sdk...

      - name: Publish to npm
        if: steps.check_version.outputs.should_publish == 'true'
        run: pnpm publish --access public --filter=@latitude-data/sdk --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract changelog for current version
        if: steps.check_version.outputs.should_publish == 'true'
        id: extract_changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          CHANGELOG_FILE="packages/sdks/typescript/CHANGELOG.md"
          
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            echo "- Package updates and improvements" >> release_notes.md
            echo "" >> release_notes.md
            echo "**Note**: Please update the CHANGELOG.md file for future releases" >> release_notes.md
          else
            # Extract the changelog section for the current version
            # Look for the version header and extract until the next version or end of file
            awk -v version="$VERSION" '
              BEGIN { found=0; content="" }
              /^## \[/ { 
                if (found) exit
                if ($0 ~ "\\[" version "\\]") {
                  found=1
                  next
                }
              }
              found && /^## \[/ { exit }
              found { content = content $0 "\n" }
              END { 
                if (content == "") {
                  print "## What'\''s Changed\n\n- Package updates and improvements\n"
                } else {
                  print content
                }
              }
            ' "$CHANGELOG_FILE" > release_notes.md
          fi
          
          # Read changelog content for use in release
          CHANGELOG_CONTENT=$(cat release_notes.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_version.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: typescript-sdk-${{ steps.get_version.outputs.version }}
          release_name: TypeScript SDK v${{ steps.get_version.outputs.version }}
          body: ${{ steps.extract_changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'rc') }}
