x-common-service: &common-service
  env_file:
    - .env
  volumes:
    - shared-storage:/app/storage/files:rw
    - shared-storage:/app/apps/web/public/files:rw
  depends_on:
    - db
    - redis
  networks:
    - web

x-web-common: &web-common
  <<: *common-service
  labels:
    - "traefik.enable=true"
    - "traefik.docker.network=web"
    - "traefik.http.services.web-service.loadbalancer.server.port=8080"
    - "traefik.http.routers.web-http.entrypoints=http"
    - "traefik.http.routers.web-http.service=web-service"
    - "traefik.http.routers.web-http.rule=Host(`app.${APP_DOMAIN}`)"
  depends_on:
    - db
    - redis
    - traefik

x-gateway-common: &gateway-common
  <<: *common-service
  labels:
    - "traefik.enable=true"
    - "traefik.docker.network=web"
    - "traefik.http.services.gateway-service.loadbalancer.server.port=8080"
    - "traefik.http.routers.gateway-http.entrypoints=http"
    - "traefik.http.routers.gateway-http.service=gateway-service"
    - "traefik.http.routers.gateway-http.rule=Host(`gateway.${APP_DOMAIN}`)"

x-websockets-common: &websockets-common
  <<: *common-service
  labels:
    - "traefik.enable=true"
    - "traefik.docker.network=web"
    - "traefik.http.services.websockets-service.loadbalancer.server.port=4002"
    - "traefik.http.routers.websockets-http.entrypoints=http"
    - "traefik.http.routers.websockets-http.service=websockets-service"
    - "traefik.http.routers.websockets-http.rule=Host(`ws.${APP_DOMAIN}`)"

services:
  traefik:
    image: traefik
    container_name: traefik
    restart: always
    command:
      --api=true
      --api.dashboard=true
      --api.insecure=${TRAEFIK_API_INSECURE:-false}
      --providers.docker=true
      --entrypoints.http.address=:80
      --entrypoints.https.address=:443
      --entryPoints.http.forwardedHeaders.insecure
      --entryPoints.https.forwardedHeaders.insecure
      --log.level=DEBUG
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.dashboard-http-router.entrypoints=http"
      - "traefik.http.routers.dashboard-http-router.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.dashboard-http-router.service=api@internal"
    networks:
      - web

  mailpit:
    image: axllent/mailpit
    ports:
      - 8025:8025
      - 1025:1025
    profiles:
      - development
    networks:
      - web

  db:
    image: postgres:15.8
    restart: always
    container_name: latitude-llm-db
    ports:
      - '5432:5432'
    env_file:
      - .env
    volumes:
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./docker/pgdata:/var/lib/postgresql/data
    networks:
      - web

  redis:
    image: redis
    restart: always
    container_name: latitude-llm-redis
    ports:
      - '6379:6379'
    networks:
      - web

  web-local:
    <<: *web-common
    image: latitude/web:latest
    build:
      context: .
      dockerfile: apps/web/docker/Dockerfile
    profiles:
      - local

  web:
    <<: *web-common
    image: ghcr.io/latitude-dev/web:latest
    restart: always
    container_name: latitude-llm-web
    platform: linux/amd64
    profiles:
      - production

  migrations-local:
    <<: *common-service
    image: latitude/migrations:latest
    build:
      context: .
      dockerfile: packages/core/docker/Dockerfile
    labels:
      - "traefik.enable=false"
    depends_on:
      - db
    profiles:
      - local

  migrations:
    <<: *common-service
    image: ghcr.io/latitude-dev/migrations:latest
    container_name: latitude-llm-migrations
    platform: linux/amd64
    labels:
      - "traefik.enable=false"
    depends_on:
      - db
    profiles:
      - production

  gateway-local:
    <<: *gateway-common
    image: latitude/gateway:latest
    build:
      context: .
      dockerfile: apps/gateway/docker/Dockerfile
    platform: linux/amd64
    profiles:
      - local

  gateway:
    <<: *gateway-common
    image: ghcr.io/latitude-dev/gateway:latest
    restart: always
    container_name: latitude-llm-gateway
    platform: linux/amd64
    profiles:
      - production

  workers-local:
    <<: *common-service
    image: latitude/workers:latest
    build:
      context: .
      dockerfile: apps/workers/docker/Dockerfile
    platform: linux/amd64
    profiles:
      - local

  workers:
    <<: *common-service
    image: ghcr.io/latitude-dev/workers:latest
    restart: always
    container_name: latitude-llm-workers
    platform: linux/amd64
    profiles:
      - production

  websockets-local:
    <<: *websockets-common
    image: latitude/websockets:latest
    build:
      context: .
      dockerfile: apps/websockets/docker/Dockerfile
    profiles:
      - local

  websockets:
    <<: *websockets-common
    image: ghcr.io/latitude-dev/websockets:latest
    restart: always
    container_name: latitude-llm-websockets
    platform: linux/amd64
    profiles:
      - production

# You need to create external network for Traefik to work (docker network create web)
networks:
  web:
    external: true

volumes:
  shared-storage:
