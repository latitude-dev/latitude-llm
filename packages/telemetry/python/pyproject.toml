[project]
name = "latitude-telemetry"
version = "1.0.0"
description = "Latitude Telemetry for Python"
authors = [{ name = "Latitude Data SL", email = "hello@latitude.so" }]
maintainers = [{ name = "Latitude Data SL", email = "hello@latitude.so" }]
readme = "README.md"
license = "LGPL-3.0"
urls.repository = "https://github.com/latitude-dev/latitude-llm/tree/main/packages/telemetry/python"
urls.homepage = "https://github.com/latitude-dev/latitude-llm/tree/main/packages/telemetry/python#readme"
urls.documentation = "https://github.com/latitude-dev/latitude-llm/tree/main/packages/telemetry/python#readme"
requires-python = ">=3.9, <3.13"
dependencies = [
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-semantic-conventions-ai>=0.4.2",
    "openinference-semantic-conventions>=0.1.12",
    "opentelemetry-instrumentation-alephalpha>=0.36.0",
    "opentelemetry-instrumentation-anthropic>=0.36.0",
    "opentelemetry-instrumentation-bedrock>=0.36.0",
    "opentelemetry-instrumentation-cohere>=0.36.0",
    "openinference-instrumentation-dspy>=0.1.14",
    "opentelemetry-instrumentation-google-generativeai>=0.36.0",
    "opentelemetry-instrumentation-groq>=0.36.0",
    "opentelemetry-instrumentation-haystack>=0.36.0",
    "opentelemetry-instrumentation-langchain>=0.36.0",
    "openinference-instrumentation-litellm>=0.1.6",
    "opentelemetry-instrumentation-llamaindex>=0.36.0",
    "opentelemetry-instrumentation-mistralai>=0.36.0",
    "opentelemetry-instrumentation-ollama>=0.36.0",
    "opentelemetry-instrumentation-openai>=0.36.0",
    "opentelemetry-instrumentation-replicate>=0.36.0",
    "opentelemetry-instrumentation-sagemaker>=0.36.0",
    "opentelemetry-instrumentation-together>=0.36.0",
    "opentelemetry-instrumentation-threading>=0.50b0",
    "opentelemetry-instrumentation-transformers>=0.36.0",
    "opentelemetry-instrumentation-vertexai>=0.36.0",
    "opentelemetry-instrumentation-watsonx>=0.36.0",
    "httpx>=0.27.2",
    "pydantic>=2.10.3",
    "typing-extensions>=4.12.2",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.1",
    "pytest>=8.3.4",
    "respx>=0.22.0",
    "pyright>=1.1.392",
    "ruff>=0.8.3",
    "sh>=1.14.3",
    "openai>=1.59.7",
    # Note: 0.41.0 onwards made Prompt Caching generally available
    # which is not compatible with the instrumentation
    "anthropic==0.40.0",
    "litellm[proxy]>=1.58.2",
]

[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportPrivateUsage = false

[tool.ruff]
target-version = "py39"
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = ["B", "C4", "E", "F", "I", "W", "UP"]
ignore = [
    "F401",
    "F403",
    # Needed because unnecessary str() on field aliases are needed
    # https://docs.pydantic.dev/2.8/concepts/fields/#field-aliases
    "UP018",
    # Needed because typing.List and typing.Dict are semi-deprecated
    # in new Python versions but we want to maintain compatibility
    "UP006",
    "UP035",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
addopts = "-p no:warnings -n auto"
xfail_strict = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
